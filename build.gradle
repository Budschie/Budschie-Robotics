/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */
 import groovy.swing.SwingBuilder

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    // We need this for deploying
    id 'org.hidetake.ssh' version '2.10.1'
}

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    maven { url 'https://jitpack.io' }
    jcenter()
}

dependencies {
        implementation 'com.github.ev3dev-lang-java:ev3dev-lang-java:2.6.1-SNAPSHOT'
}

version '1.0'

remotes {
    ev3 {
        host = 'ev3dev'
        user = 'robot'
        // Set this to whatever your path is
        // Uncomment the line below if you want to use an password instead:
        // password = 'this is your surely very secure password1234!'
        identity = file('C:/Users/Budschie/.keys/ev3-id')
    }
}

task setupEV3 {
    doLast {
        String pass = ''
        new SwingBuilder().edt {
            dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
      title: 'Enter password', // Dialog title
      alwaysOnTop: true, // pretty much what the name says
      resizable: true, // Don't allow the user to resize the dialog
      locationRelativeTo: null, // Place dialog in center of the screen
      pack: true, // We need to pack the dialog (so it will take the size of it's children
      show: true // Let's show it
  ) {
                vbox { // Put everything below each other
                    label(text: 'Please enter key passphrase:')
                    input = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
        pass = input.password // Set pass variable to value of input field
        dispose() // Close dialog
                    })
                }
  }
        }
        ssh.run {
            // Maybe we do 'multithreading' in the future...
            session(remotes.ev3) {
                println 'Setting up EV3...'
                println ''
                println '##################################'
                println '# Note that even if this setup   #'
                println '# shows that it failed, it might #'
                println '# still have succeded due to an  #'
                println '# probable scripting error in    #'
                println '# the installer.sh file.         #'
                println '##################################'
                println ''
                println 'Cleaning up old directories...'
                execute 'echo ' + pass + ' | sudo -S -k rm -r java; mkdir -p java/libraries'
                println 'Getting logging lib...'
                // For whatever reason, the installer script overrides the files, and as it crashes, I can't excute behind it, so that is a bit unfortunate
                execute 'wget -P java/loglibs https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.9/slf4j-api-1.7.9.jar'
                println 'Downloading installer...'
                execute 'rm -r installer; mkdir -p installer'
                execute 'wget -P installer https://raw.githubusercontent.com/ev3dev-lang-java/installer/master/installer.sh'
                println 'Updating Debian...'
                execute 'echo ' + pass + ' | sudo -S -k bash installer/installer.sh update'
                println 'Downloading java...'
                execute 'echo ' + pass + ' | sudo -S -k bash installer/installer.sh java'
                println 'Downloading libs...'
                execute 'echo ' + pass + ' | sudo -S -k bash installer/installer.sh javaLibs'
                println 'Done.'
            }
        }
    }
}

task deploy {
    dependsOn 'jar'
    group 'build'
    description 'Builds the associated files and uploads them via an ssh session to the EV3.'
    doLast {
        println 'Deploying files...'
        ssh.run {
            session(remotes.ev3) {
                /* groovylint-disable-next-line GStringExpressionWithinString */
                // execute 'mkdir project.name + '-' + project.version'
                execute 'rm -r ' + project.name + '; mkdir ' + project.name
                put from: file('build/libs/' + project.name + '-' + project.version + '.jar'), into: '/home/robot/' + project.name

                // This may be a bit dirty, but cmon, I am a noob
                // execute 'echo "java -cp ' + project.name + '-' + project.version + '.jar:/home/robot/java/libraries/*:/home/robot/java/loglibs/* de.budschie.robotics.Main > latest.log" > ' + project.name + '/run.sh'
                 execute 'echo "java -cp ' + project.name + '-' + project.version + '.jar:/home/robot/java/libraries/*:/home/robot/java/loglibs/* de.budschie.robotics.Main" > ' + project.name + '/run.sh'
                // We couldn't execute this file before, but with this, we grant ourselves full rights on this file
                execute 'chmod u+rwx ' + project.name + '/run.sh'
            // execute 'echo java -jar compiledJars/' + roject.name + '-' + project.version + '.jar > run' + project.name + project.version
            }
        }
        println 'Deployed files.'
    }

    task deployAndRun {
        dependsOn 'deploy'
        group 'build'
        description 'Builds the associated files and uploads the via an ssh session to the EV3. Then, this given program will be executed.'

        doLast {
            println 'Executing...'
            ssh.run {
                session(remotes.ev3) {
                    execute 'cd ' + project.name + '; ./run.sh'
                }
            }
            println 'Executed.'
        }
    }
}
